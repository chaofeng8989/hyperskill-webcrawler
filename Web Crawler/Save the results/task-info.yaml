type: edu
custom_name: stage5
files:
- name: test/CrawlerTest.java
  visible: false
  text: |
    import common.WebCrawlerStage5Test;

    public class CrawlerTest extends WebCrawlerStage5Test {

    }
  learner_created: false
- name: test/common/WebCrawlerCommonTestGenerator.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<WebCrawlerClue>> {
        return listOf(
            createWebCrawlerTest("Window is not visible") { frameGetter().isVisible.toCheckResult() },
            createWebCrawlerTest("Window title is empty") { frameGetter().title.isNotEmpty().toCheckResult() }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
        val name: String,
        val isEnabled: Boolean,
        private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return createWebCrawlerTest("No suitable component '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }.toCheckResult()
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<WebCrawlerClue>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<WebCrawlerClue> {
            return if (requirements.isEnabled) {
                createWebCrawlerTest("'${requirements.name}' should be enabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest component.isEnabled.toCheckResult()
                }
            } else {
                createWebCrawlerTest("'${requirements.name}' should be disabled") {
                    val component = requireNotNull(requirements.suitableComponent) {
                        "Should check for the component existence before"
                    }

                    return@createWebCrawlerTest (!component.isEnabled).toCheckResult()
                }
            }
        }

        return components.map(::generateIsEnabledTest)
    }
  learner_created: false
- name: test/common/WebCrawlerLocalhostPages.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.v6.mocks.web.WebPage
    import org.hyperskill.hstest.v6.mocks.web.WebServerMock
    import org.hyperskill.hstest.v6.testcase.TestCase

    fun <AttachType> TestCase<AttachType>.withLocalhostPagesOn(port: Int): TestCase<AttachType> {
        val webServerMock = WebServerMock(port).apply {
            pages.forEach { _, (_, content, relativeUrl) ->
                setPage(relativeUrl,
                        WebPage().setContent(content).setContentType("text/html")) }
        }

        return this.runWith(webServerMock)
    }

    data class PageProperties(val title: String, val content: String, val relativePath: String, val childUrls: Set<String>)

    val pages = mapOf(
        localhost(PORT, "/exampleDotCom") to PageProperties(
            "Example Domain",
            """<!doctype html>
    <html>
    <head>
        <title>Example Domain</title>

        <meta charset="utf-8" />
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <style type="text/css">
        body {
            background-color: #f0f0f2;
            margin: 0;
            padding: 0;
            font-family: "Open Sans", "Helvetica Neue", Helvetica, Arial, sans-serif;

        }
        div {
            width: 600px;
            margin: 5em auto;
            padding: 50px;
            background-color: #fff;
            border-radius: 1em;
        }
        a:link, a:visited {
            color: #38488f;
            text-decoration: none;
        }
        @media (max-width: 700px) {
            body {
                background-color: #fff;
            }
            div {
                width: auto;
                margin: 0 auto;
                border-radius: 0;
                padding: 1em;
            }
        }
        </style>
    </head>

    <body>
    <div>
        <h1>Example of Example Domain</h1>
        <p>This domain is established to be used for illustrative examples in documents. You may use this
        domain in examples without prior coordination or asking for permission.</p>
        <p><a href="unavailablePage">More information...</a></p>
    </div>
    </body>
    </html>""",
            "/exampleDotCom",
            setOf(localhost(PORT, "/unavailablePage"))
        ),
        localhost(PORT, "/circular1") to PageProperties(
            "circular1tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular1tiTle</title>
                |</head>
                |<body>
                |<a href="circular2">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular1",
            setOf(localhost(PORT, "/circular2"))
        ),
        localhost(PORT, "/circular2") to PageProperties(
            "circular2tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular2tiTle</title>
                |</head>
                |<body>
                |<a href="circular3">link1</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular2",
            setOf(localhost(PORT, "/circular3"))
        ),
        localhost(PORT, "/circular3") to PageProperties(
            "circular3tiTle",
            """
                |<!doctype html>
                |<html>
                |<head>
                |<title>circular3tiTle</title>
                |</head>
                |<body>
                |<a href="circular1">link</a>
                |<a href="exampleDotCom">link</a>
                |</body>
                |</html>
            """.trimMargin(),
            "/circular3",
            setOf(localhost(PORT, "/circular1"), localhost(PORT, "/exampleDotCom"))
        )
    )
  learner_created: false
- name: test/common/WebCrawlerStage5Test.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.*
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    import crawler.WebCrawler
    import org.hyperskill.hstest.v6.common.Utils
    import java.io.File

    abstract class WebCrawlerStage5Test : SwingTest<WebCrawlerClue>(WebCrawler()) {

        override fun generate(): List<TestCase<WebCrawlerClue>> {
            val titlesTable = ComponentRequirements("TitlesTable", isEnabled = false) { window.table(it) }
            val urlText = ComponentRequirements("UrlTextField", isEnabled = true) { window.textBox(it) }
            val getButton = ComponentRequirements("RunButton", isEnabled = true) { window.button(it) }
            val titleLabel = ComponentRequirements("TitleLabel", isEnabled = true) { window.label(it) }
            val saveButton = ComponentRequirements("ExportButton", isEnabled = true) { window.button(it) }
            val pathToFileText = ComponentRequirements("ExportUrlTextField", isEnabled = true) { window.textBox(it) }

            return frameTests(::frame) +
                    existenceTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +
                    componentsAreEnabledTests(titlesTable, urlText, getButton, titleLabel, saveButton, pathToFileText) +
                    stage3Tests(
                        titleLabelRequirements = titleLabel,
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText
                    ) +
                    stage4Tests(
                        titlesTableRequirements = titlesTable,
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText
                    ) +
                    stage5Tests(
                        getTextButtonRequirements = getButton,
                        locationTextFieldRequirements = urlText,
                        saveButtonRequirements = saveButton,
                        savePathTextFieldRequirements = pathToFileText,
                        depth = 1
                    )
        }

        override fun check(reply: String, clue: WebCrawlerClue): CheckResult {
            return checkWebCrawlerTest(reply = reply, clue = clue)
        }
    }

    fun stage3Tests(
            titleLabelRequirements: ComponentRequirements<JLabelFixture>,
            getTextButtonRequirements: ComponentRequirements<JButtonFixture>,
            locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
                createWebCrawlerTest("Title your app shows is wrong") {
                    val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                    val getTextButton = getTextButtonRequirements.requireExistingComponent()
                    val titleLabel = titleLabelRequirements.requireExistingComponent()

                    return@createWebCrawlerTest pages
                            .asSequence()
                            .map { (url, pageProperties) ->
                                locationTextField.setText(url)

                                getTextButton.click()

                                Utils.sleep(100)

                                val titleInLabel = titleLabel.text().orEmpty()

                                return@map titleInLabel == pageProperties.title
                            }
                            .all { it }
                            .toCheckResult()
                }.withLocalhostPagesOn(PORT)
        )
    }


    fun stage4Tests(
            titlesTableRequirements: ComponentRequirements<JTableFixture>,
            getTextButtonRequirements: ComponentRequirements<JButtonFixture>,
            locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
                createWebCrawlerTest {
                    val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                    val getTextButton = getTextButtonRequirements.requireExistingComponent()
                    val titleTable = titlesTableRequirements.requireExistingComponent()

                    for (url in pages.keys) {
                        locationTextField.setText(url)

                        getTextButton.click()

                        Utils.sleep(100)

                        val contents = titleTable.contents()

                        if (contents.any { it.size != 2 }) {
                            return@createWebCrawlerTest fail("Table your app shows has a wrong number of columns")
                        }

                        val actualLinks = url.deepUrls(depth = 1).size

                        if (contents.size != actualLinks) {
                            return@createWebCrawlerTest fail("Table your app shows has a wrong number of rows. " +
                                    "Should be $actualLinks instead of ${contents.size}")
                        }

                        for ((writtenUrl, writtenTitle) in contents) {
                            if (!pages.containsKey(writtenUrl)) {
                                return@createWebCrawlerTest fail("Your app shows a link " +
                                        "to the page that is unavailable. " +
                                        "You shouldn't add to the table unavailable links.")
                            }
                            if (pages.getValue(writtenUrl).title != writtenTitle) {
                                return@createWebCrawlerTest fail("Table your app shows contains an incorrect row")
                            }
                        }
                    }

                    return@createWebCrawlerTest CheckResult(true)
                }.withLocalhostPagesOn(PORT)
        )
    }

    fun stage5Tests(
        saveButtonRequirements: ComponentRequirements<JButtonFixture>,
        getTextButtonRequirements: ComponentRequirements<JButtonFixture>,
        locationTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
        savePathTextFieldRequirements: ComponentRequirements<JTextComponentFixture>,
        depthTextFieldRequirements: ComponentRequirements<JTextComponentFixture>? = null,
        depthCheckBoxRequirements: ComponentRequirements<JCheckBoxFixture>? = null,
        parsedLabelRequirements: ComponentRequirements<JLabelFixture>? = null,
        depth: Int
    ): List<TestCase<WebCrawlerClue>> {
        return listOf(
            createWebCrawlerTest {
                val locationTextField = locationTextFieldRequirements.requireExistingComponent()
                val getTextButton = getTextButtonRequirements.requireExistingComponent()
                val saveButton = saveButtonRequirements.requireExistingComponent()
                val savePathTextField = savePathTextFieldRequirements.requireExistingComponent()

                val depthTextField = depthTextFieldRequirements?.requireExistingComponent()
                val depthCheckBox = depthCheckBoxRequirements?.requireExistingComponent()
                val parsedLabel = parsedLabelRequirements?.requireExistingComponent()

                for (url in pages.keys) {
                    depthTextField?.setText("$depth")
                    depthCheckBox?.enable()

                    locationTextField.setText(url)

                    getTextButton.click()

                    val fileName = File("").absolutePath + "/temp.log"

                    savePathTextField.setText(fileName)

                    saveButton.click()

                    val file = File(fileName)

                    if (!file.exists()) {
                        return@createWebCrawlerTest fail("Your app doesn't create a file")
                    }

                    val contents = file.readText().lines().chunked(2).filter { it.size == 2 }
                    val deepUrls = url.deepUrls(depth)

                    if (contents.size != deepUrls.size) {
                        return@createWebCrawlerTest fail("File your app saves has a wrong lines number")
                    }

                    if (contents.map { it.first() }.toSet() != deepUrls) {
                        return@createWebCrawlerTest fail("File your app saves has a wrong child url")
                    }

                    for ((writtenUrl, writtenTitle) in contents) {
                        if (pages.getValue(writtenUrl).title != writtenTitle) {
                            return@createWebCrawlerTest fail("File your app saves has a wrong pair of lines")
                        }
                    }
                }

                return@createWebCrawlerTest CheckResult(true)
            }.withLocalhostPagesOn(PORT)
        )
    }
  learner_created: false
- name: test/common/WebCrawlerUtil.kt
  visible: false
  text: |
    package common

    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.assertj.swing.fixture.JCheckBoxFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    const val PORT = 25555  // TODO: maybe use another port?

    class WebCrawlerClue(val feedback: String?, val checker: () -> CheckResult)

    fun createWebCrawlerTest(feedback: String? = null, checker: () -> CheckResult): TestCase<WebCrawlerClue> {
        return TestCase<WebCrawlerClue>()
            .setAttach(
                WebCrawlerClue(
                    feedback = feedback,
                    checker = checker
                )
            )
    }

    fun checkWebCrawlerTest(reply: String, clue: WebCrawlerClue): CheckResult {
        return try {
            val (result, feedback) = clue.checker()

            CheckResult(result, clue.feedback ?: feedback)
        } catch (e: AssertionError) {
            CheckResult(false, clue.feedback)
        }
    }

    private operator fun CheckResult.component1() = isCorrect
    private operator fun CheckResult.component2() = feedback

    fun Boolean.toCheckResult() = CheckResult(this)

    fun fail(message: String) = CheckResult(false, message)

    fun htmlTextsAreEqual(source: String, inTextField: String): Boolean {
        fun String.formatted(): String {
            return this.trim().replace("\r\n", "\n").replace("\r", "\n")
        }

        return source.formatted() == inTextField.formatted()
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>> ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }

    fun localhost(port: Int, url: String) = "http://localhost:$port$url"

    fun String.deepUrls(depth: Int): Set<String> {
        return deepUrlsOld(depth) + setOf(this)
    }

    fun String.deepUrlsOld(depth: Int): Set<String> {
        fun String.childrenOrEmpty(): Set<String> {
            val pageProperties = pages[this]

            if (depth < 0 || pageProperties == null) {
                return emptySet()
            }

            return pageProperties.childUrls.filter { it in pages }.toSet()
        }

        var remainingDepth = depth - 1
        val answer = this.childrenOrEmpty().toMutableSet()
        while (remainingDepth > 0) {
            val next = answer.flatMap { it.childrenOrEmpty() } - answer

            if (next.isEmpty()) {
                break
            }

            answer.addAll(next)

            --remainingDepth
        }

        return answer
    }

    fun JCheckBoxFixture.enable() {
        if (!this.isEnabled) {
            this.click()
        }
    }
  learner_created: false
- name: src/crawler/WebCrawler.java
  visible: true
<<<<<<< HEAD
  text: "package crawler;\n\nimport javax.swing.*;\nimport javax.swing.table.AbstractTableModel;\n\
    import javax.swing.table.DefaultTableModel;\nimport javax.swing.table.TableColumn;\n\
    import java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\
    import java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\
    import java.io.InputStreamReader;\nimport java.net.MalformedURLException;\nimport\
    \ java.net.URL;\nimport java.net.URLConnection;\nimport java.nio.charset.StandardCharsets;\n\
    import java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\
    \npublic class WebCrawler extends JFrame {\n\n    JTextField urlTextField;\n \
    \   JButton runButton;\n    JScrollPane scrollPane;\n    JTable links;\n    DefaultTableModel\
    \ defaultTableModel;\n    JLabel titleLabel;\n    JLabel title;\n    public WebCrawler()\
    \ {\n        componentInit();\n    }\n    private void componentInit() {\n   \
    \     setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        setTitle(\"WebCrawler\"\
    );\n        urlTextField = new JTextField();\n        runButton = new JButton();\n\
    \        titleLabel = new JLabel();\n        title = new JLabel();\n        links\
    \ = new JTable();\n        scrollPane = new JScrollPane(links);\n        JPanel\
    \ jpanel = new JPanel();\n        jpanel.add(scrollPane);\n\n        defaultTableModel\
    \ = new DefaultTableModel(0,0);\n        String[] header = new String[]{\"URL\"\
    , \"Title\"};\n        links.setName(\"TitlesTable\");\n        defaultTableModel.setColumnIdentifiers(header);\n\
    \        links.getTableHeader().setPreferredSize(new Dimension(scrollPane.getWidth(),\
    \ 25));\n        links.setRowHeight(25);\n        links.setModel(defaultTableModel);\n\
    \        links.setGridColor(Color.BLACK);\n\n        jpanel.setName(\"HtmlTextArea\"\
    );\n        //jpanel.setLayout(new GridBagLayout());\n        urlTextField.setName(\"\
    UrlTextField\");\n        runButton.setName(\"RunButton\");\n        titleLabel.setName(\"\
    TitleLabel\");\n        title.setName(\"Title\");\n        title.setText(\"Title\
    \ : \");\n        setSize(800, 1200);\n        urlTextField.setBounds(20, 20,\
    \ 600, 30);\n        runButton.setBounds(650,20,100,30);\n        title.setBounds(30,\
    \ 60, 100, 30);\n        titleLabel.setBounds(150, 60, 400, 30);\n        jpanel.setBounds(00,90,800,1150);\n\
    \        scrollPane.setBounds(10,10,750,1120);\n        //scrollPane.setSize(750,1000);\n\
    \        //jpanel.setBackground(Color.BLACK);\n        jpanel.setLayout(new BorderLayout());\n\
    \        add(urlTextField);\n        add(runButton);\n        add(jpanel);\n \
    \       add(titleLabel);\n        add(title);\n        //scrollPane.disable();\n\
    \        links.disable();\n        setLayout(null);\n\n        runButton.setText(\"\
    Get text!\");\n//        title.setText(\"Title : \");\n        //setLayout(urlTextField,runButton,scrollPane);\n\
    \        runButton.addActionListener(new ButtonClickListener());\n        //scrollPane.setText(\"\
    HTML code?\");\n        setVisible(true);\n    }\n    class ButtonClickListener\
    \ implements ActionListener {\n        @Override\n        public void actionPerformed(ActionEvent\
    \ e) {\n            if(ApplicationRunner.DEBUG) System.out.println(urlTextField.getText());\n\
    \            URL initURL = null, topDomain = null;\n            try {\n      \
    \          String top = null;\n                String firstPage = urlTextField.getText();\n\
    \                Pattern pattern = Pattern.compile(\"\\\\/\\\\/([^\\\\/]+)\");\n\
    \                Matcher matcher = pattern.matcher(firstPage);\n             \
    \   \n                if (matcher.find()) top =  firstPage.substring(0, matcher.end());\n\
    \                initURL = new URL(firstPage);\n                topDomain = new\
    \ URL(top);\n            } catch (MalformedURLException malformedURLException)\
    \ {\n                malformedURLException.printStackTrace();\n            }\n\
    \            String siteContent = getSiteContent(initURL);\n            String\
    \ mainTitle = getTitle(siteContent);\n            titleLabel.setText(mainTitle);\n\
    \            defaultTableModel.setRowCount(0);\n            Object[][] linkTitle\
    \ = getLinkAndTitle(initURL, topDomain);\n            for (int count = 0; count\
    \ < linkTitle.length; count++) {\n                defaultTableModel.addRow(new\
    \ Object[] { linkTitle[count][0], linkTitle[count][1]});\n            }\n    \
    \    }\n    }\n\n    private Object[][] getLinkAndTitle(URL firstPageURL, URL\
    \ topDomain) {\n\n        Map<String, String> map = new HashMap<>();\n\n     \
    \   Pattern pattern = Pattern.compile(\"<a.*href=['\\\"]([^'\\\"]*)['\\\"]\");\n\
    \        dfs(firstPageURL, map, pattern, 1, topDomain);\n        Object[][] data\
    \ = new Object[map.size()][2];\n        if(ApplicationRunner.DEBUG) System.out.println(map);\n\
    \        int i = 0;\n        for (Map.Entry<String, String> e : map.entrySet())\
    \ {\n            data[i][0] = e.getKey();\n            data[i++][1] = e.getValue();\n\
    \        }\n        return data;\n    }\n\n    private void dfs(URL url, Map<String,\
    \ String> map, Pattern pattern, int depth, URL topDomain) {\n        if (depth\
    \ < 0) return;\n        if(ApplicationRunner.DEBUG) System.out.println(\"URL =>>>>>>\"\
    \ +url);\n        String siteString = getSiteContent(url);\n//        if(ApplicationRunner.DEBUG)\
    \ System.out.println(siteString);\n        if (siteString == null) return;\n \
    \       String title = getTitle(siteString);\n        if(ApplicationRunner.DEBUG)\
    \ System.out.println(\"TITLE====>>>>\" + title);\n        map.put(url.toString(),\
    \ title);\n        Matcher matcher = pattern.matcher(siteString);\n        Set<URL>\
    \ children = new HashSet<>();\n        while (matcher.find()) {\n            String\
    \ nextUrl = matcher.group(1);\n            if(ApplicationRunner.DEBUG) System.out.print(\"\
    find href : \" + nextUrl +\"*****\");\n            if (nextUrl.isEmpty()) continue;\n\
    \n            if (nextUrl.startsWith(\"//\")) {\n                nextUrl = \"\
    http:\" + nextUrl;\n            } else if (nextUrl.startsWith(\"/\")){\n     \
    \           nextUrl = topDomain + nextUrl;\n            } else if (!nextUrl.startsWith(\"\
    http\")) {\n                nextUrl = topDomain + \"/\"+ nextUrl;\n          \
    \  }\n            try {\n                URL childURL = new URL(nextUrl);\n  \
    \              children.add(childURL);\n                if(ApplicationRunner.DEBUG)\
    \ System.out.println(\"change to >>>>>\" +childURL.toString());\n\n          \
    \  } catch (MalformedURLException e) {\n                e.printStackTrace();\n\
    \            }\n        }\n        if(ApplicationRunner.DEBUG) System.out.println(children);\n\
    \        for (URL childURL : children) {\n            dfs(childURL, map, pattern,\
    \ depth - 1, topDomain);\n        }\n    }\n    private String getTitle(String\
    \ text) {\n        Pattern pattern = Pattern.compile(\"<title.*>(.*)<\\\\/title>\"\
    );\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find())\
    \ return matcher.group(1);\n        return null;\n    }\n    private String getSiteContent(URL\
    \ siteURL) {\n        try {\n            URLConnection connection = siteURL.openConnection();\n\
    \            String contentType = connection.getContentType();\n\n           \
    \ if(ApplicationRunner.DEBUG) System.out.println(\"TYPE>>>>>>>\"+contentType);\n\
    \            if (contentType!= null && contentType.contains(\"text/html\")) {\n\
    \                InputStream inputStream = connection.getInputStream();\n    \
    \            String siteText = read(inputStream);\n                if(ApplicationRunner.DEBUG)\
    \ System.out.println(siteText);\n\n                return siteText;\n        \
    \    }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n\
    \            return null;\n        } catch (Exception allE) {\n            allE.printStackTrace();\n\
    \            return null;\n        }\n        return null;\n    }\n    private\
    \ String read(InputStream stream) throws IOException {\n        final int bufferSize\
    \ = 1024;\n        final char[] buffer = new char[bufferSize];\n        final\
    \ StringBuilder out = new StringBuilder();\n        InputStreamReader in = new\
    \ InputStreamReader(stream, StandardCharsets.UTF_8);\n        int charsRead;\n\
    \        while((charsRead = in.read(buffer, 0, buffer.length)) > 0) {\n      \
    \      out.append(buffer, 0, charsRead);\n        }\n        return out.toString();\n\
    \    }\n}"
  learner_created: false
- name: src/crawler/ApplicationRunner.java
  visible: true
  text: |
    package crawler;


    public class ApplicationRunner {
        public static boolean DEBUG = false;
        public static void main(String[] args) {
            new WebCrawler();
        }
    }
  learner_created: false
- name: temp.log
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/59/stages/321/implement
status: Solved

feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/59/stages/321/implement">JetBrains
    Academy</a>
  time: Sun, 12 Jul 2020 04:53:29 UTC
record: -1
